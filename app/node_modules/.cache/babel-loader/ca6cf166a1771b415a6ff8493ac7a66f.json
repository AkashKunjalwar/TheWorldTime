{"ast":null,"code":"const initialState = {\n  time: \"\"\n};\n\nconst CalculateTimeReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"CALCULATE_TIME\") {\n    const today = new Date();\n    const minutes = today.getUTCMinutes();\n    const seconds = today.getUTCSeconds();\n\n    const calculatedTime = (Hours, Minutes, Seconds) => {\n      let min = Hours * 60 % 60 + Math.floor(Minutes);\n      let hours = Math.floor(Hours);\n      let sec = Minutes * 60 % 60 + Seconds;\n\n      if (min >= 60) {\n        const rH = String(hours + 1);\n        const rM = String(min - 60);\n\n        if (sec >= 60) {\n          const rH = String(hours + 1);\n          const rM = String(min - 60 + 1);\n          const rS = String(sec - 60);\n          return rH + \" hours \" + rM + \" minutes \" + rS + \" seconds\";\n        }\n\n        return rH + \" hours \" + rM + \" minutes \" + sec + \" seconds\";\n      } else {\n        if (sec >= 60) {\n          const rH = String(hours);\n          const rM = String(min + 1);\n          const rS = String(sec - 60);\n          return rH + \" hours \" + rM + \" minutes \" + rS + \" seconds\";\n        }\n\n        return String(hours) + \" hours \" + String(min) + \" minutes \" + sec + \" seconds\";\n      }\n    };\n\n    if (action.payload >= 24) {\n      state.time = setTimeout(() => {\n        calculatedTime(action.payload - 24, minutes, seconds);\n      }, 1000);\n      return {\n        time: state.time\n      };\n    } else if (action.payload < 0) {\n      state.time = setTimeout(() => {\n        calculatedTime(action.payload + 24, minutes, seconds);\n      }, 1000);\n      return {\n        time: state.time\n      };\n    } else {\n      state.time = setTimeout(calculatedTime(action.payload, minutes, seconds), 1000);\n      return {\n        time: state.time\n      };\n    }\n  }\n\n  return state;\n};\n\n_c = CalculateTimeReducer;\nexport default CalculateTimeReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalculateTimeReducer\");","map":{"version":3,"sources":["C:/Users/akunjalw/Desktop/projects/akash/theworldclock/app/src/Store/CalculateTimeReducer.js"],"names":["initialState","time","CalculateTimeReducer","state","action","type","today","Date","minutes","getUTCMinutes","seconds","getUTCSeconds","calculatedTime","Hours","Minutes","Seconds","min","Math","floor","hours","sec","rH","String","rM","rS","payload","setTimeout"],"mappings":"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","sourcesContent":["const initialState = {\r\n  time: \"\",\r\n};\r\n\r\nconst CalculateTimeReducer = (state = initialState, action) => {\r\n  if (action.type === \"CALCULATE_TIME\") {\r\n    const today = new Date();\r\n    const minutes = today.getUTCMinutes();\r\n    const seconds = today.getUTCSeconds();\r\n    const calculatedTime = (Hours, Minutes, Seconds) => {\r\n      let min = ((Hours * 60) % 60) + Math.floor(Minutes);\r\n      let hours = Math.floor(Hours);\r\n      let sec = ((Minutes * 60) % 60) + Seconds;\r\n      if (min >= 60) {\r\n        const rH = String(hours + 1);\r\n        const rM = String(min - 60);\r\n        if (sec >= 60) {\r\n          const rH = String(hours + 1);\r\n          const rM = String(min - 60 + 1);\r\n          const rS = String(sec - 60);\r\n          return rH + \" hours \" + rM + \" minutes \" + rS + \" seconds\";\r\n        }\r\n        return rH + \" hours \" + rM + \" minutes \" + sec + \" seconds\";\r\n      } else {\r\n        if (sec >= 60) {\r\n          const rH = String(hours);\r\n          const rM = String(min + 1);\r\n          const rS = String(sec - 60);\r\n          return rH + \" hours \" + rM + \" minutes \" + rS + \" seconds\";\r\n        }\r\n        return (\r\n          String(hours) +\r\n          \" hours \" +\r\n          String(min) +\r\n          \" minutes \" +\r\n          sec +\r\n          \" seconds\"\r\n        );\r\n      }\r\n    };\r\n    if (action.payload >= 24) {\r\n      state.time = setTimeout(() => {\r\n        calculatedTime(action.payload - 24, minutes, seconds);\r\n      }, 1000);\r\n      return {\r\n        time: state.time,\r\n      };\r\n    } else if (action.payload < 0) {\r\n      state.time = setTimeout(() => {\r\n        calculatedTime(action.payload + 24, minutes, seconds);\r\n      }, 1000);\r\n      return {\r\n        time: state.time,\r\n      };\r\n    } else {\r\n      state.time = setTimeout(\r\n        calculatedTime(action.payload, minutes, seconds),\r\n        1000\r\n      );\r\n      return {\r\n        time: state.time,\r\n      };\r\n    }\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default CalculateTimeReducer;\r\n"]},"metadata":{},"sourceType":"module"}
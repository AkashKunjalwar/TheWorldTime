{"ast":null,"code":"const initialState = {\n  minutes: \"\",\n  seconds: \"\",\n  time: \"\"\n};\n\nconst CalculateTimeReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"CALCULATE_TIME\") {\n    const today = new Date();\n    const minutes = today.getUTCMinutes();\n    const seconds = today.getUTCSeconds();\n\n    const calculatedTime = (Hours, Minutes, Seconds) => {\n      let min = Hours * 60 % 60 + Math.floor(Minutes);\n      let hours = Math.floor(Hours);\n      let sec = Minutes * 60 % 60 + Seconds;\n\n      if (min >= 60) {\n        const rH = String(hours + 1);\n        const rM = String(min - 60);\n\n        if (sec >= 60) {\n          const rH = String(hours + 1);\n          const rM = String(min - 60 + 1);\n          const rS = String(sec - 60);\n          return rH + \" hours \" + rM + \" minutes \" + rS + \" seconds\";\n        }\n\n        return rH + \" hours \" + rM + \" minutes \" + sec + \" seconds\";\n      } else {\n        if (sec >= 60) {\n          const rH = String(hours);\n          const rM = String(min + 1);\n          const rS = String(sec - 60);\n          return rH + \" hours \" + rM + \" minutes \" + rS + \" seconds\";\n        }\n\n        return String(hours) + \" hours \" + String(min) + \" minutes \" + sec + \" seconds\";\n      }\n    };\n\n    if (action.payload.hours >= 24) {\n      state.time = calculatedTime(action.payload.hours, minutes, seconds);\n      return {\n        hours: state.hours,\n        minutes: state.minutes,\n        seconds: state.seconds,\n        time: state.time,\n        date: state.date\n      };\n    } else if (action.payload.hours < 0) {\n      state.time = calculatedTime(action.payload.hours, minutes, seconds);\n      return {\n        hours: state.hours,\n        minutes: state.minutes,\n        seconds: state.seconds,\n        time: state.time,\n        date: state.date\n      };\n    } else {\n      state.time = calculatedTime(action.payload.hours, minutes, seconds);\n      return {\n        hours: state.hours,\n        minutes: state.minutes,\n        seconds: state.seconds,\n        time: state.time,\n        date: state.date\n      };\n    }\n  }\n\n  return state;\n};\n\n_c = CalculateTimeReducer;\nexport default CalculateTimeReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalculateTimeReducer\");","map":{"version":3,"sources":["C:/Users/akunjalw/Desktop/projects/akash/theworldclock/app/src/Store/CalculateTimeReducer.js"],"names":["initialState","minutes","seconds","time","CalculateTimeReducer","state","action","type","today","Date","getUTCMinutes","getUTCSeconds","calculatedTime","Hours","Minutes","Seconds","min","Math","floor","hours","sec","rH","String","rM","rS","payload","date"],"mappings":"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","sourcesContent":["const initialState = {\r\n  minutes: \"\",\r\n  seconds: \"\",\r\n  time: \"\",\r\n};\r\n\r\nconst CalculateTimeReducer = (state = initialState, action) => {\r\n  if (action.type === \"CALCULATE_TIME\") {\r\n    const today = new Date();\r\n    const minutes = today.getUTCMinutes();\r\n    const seconds = today.getUTCSeconds();\r\n    const calculatedTime = (Hours, Minutes, Seconds) => {\r\n      let min = ((Hours * 60) % 60) + Math.floor(Minutes);\r\n      let hours = Math.floor(Hours);\r\n      let sec = ((Minutes * 60) % 60) + Seconds;\r\n      if (min >= 60) {\r\n        const rH = String(hours + 1);\r\n        const rM = String(min - 60);\r\n        if (sec >= 60) {\r\n          const rH = String(hours + 1);\r\n          const rM = String(min - 60 + 1);\r\n          const rS = String(sec - 60);\r\n          return rH + \" hours \" + rM + \" minutes \" + rS + \" seconds\";\r\n        }\r\n        return rH + \" hours \" + rM + \" minutes \" + sec + \" seconds\";\r\n      } else {\r\n        if (sec >= 60) {\r\n          const rH = String(hours);\r\n          const rM = String(min + 1);\r\n          const rS = String(sec - 60);\r\n          return rH + \" hours \" + rM + \" minutes \" + rS + \" seconds\";\r\n        }\r\n        return (\r\n          String(hours) +\r\n          \" hours \" +\r\n          String(min) +\r\n          \" minutes \" +\r\n          sec +\r\n          \" seconds\"\r\n        );\r\n      }\r\n    };\r\n    if (action.payload.hours >= 24) {\r\n      state.time = calculatedTime(action.payload.hours, minutes, seconds);\r\n      return {\r\n        hours: state.hours,\r\n        minutes: state.minutes,\r\n        seconds: state.seconds,\r\n        time: state.time,\r\n        date: state.date,\r\n      };\r\n    } else if (action.payload.hours < 0) {\r\n      state.time = calculatedTime(action.payload.hours, minutes, seconds);\r\n      return {\r\n        hours: state.hours,\r\n        minutes: state.minutes,\r\n        seconds: state.seconds,\r\n        time: state.time,\r\n        date: state.date,\r\n      };\r\n    } else {\r\n      state.time = calculatedTime(action.payload.hours, minutes, seconds);\r\n      return {\r\n        hours: state.hours,\r\n        minutes: state.minutes,\r\n        seconds: state.seconds,\r\n        time: state.time,\r\n        date: state.date,\r\n      };\r\n    }\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default CalculateTimeReducer;\r\n"]},"metadata":{},"sourceType":"module"}
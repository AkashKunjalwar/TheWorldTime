{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst FetchFunctions = () => {\n  _s();\n\n  const [regionData, setRegionData] = useState([]);\n  const utcOffset = useSelector(state => state.SendOutputReducer.utcOffset);\n  const dispatch = useDispatch();\n\n  const FetchRegions = async () => {\n    const response = await fetch(\"http://localhost:5000/api\");\n    const data = await response.json();\n    setRegionData(prevState => [...prevState, ...data.regions]);\n  };\n\n  const FetchRegion = async id => {\n    const response = await fetch(`http://localhost:5000/api/${id}`);\n    const data = await response.json();\n    dispatch({\n      type: \"LOCATION_DETAILS\",\n      payload: data\n    });\n  };\n\n  const calculateDateAndTime = () => {\n    const today = new Date();\n    const hours = today.getUTCHours() + +utcOffset;\n    const minutes = today.getUTCMinutes();\n    const seconds = today.getUTCSeconds();\n    const date = today.getUTCDate();\n    const month = today.getMonth();\n    const year = today.getFullYear();\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    if (hours >= 24) {\n      const RegionDate = String(date + 1) + \"th of \" + monthNames[month] + \", \" + String(year);\n    }\n  };\n\n  return {\n    regionData,\n    FetchRegions,\n    FetchRegion,\n    calculateDateAndTime\n  };\n};\n\n_s(FetchFunctions, \"Deq1l3m5cxSRQLsvtTEkx+r2lIs=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = FetchFunctions;\nexport default FetchFunctions;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchFunctions\");","map":{"version":3,"sources":["C:/Users/akunjalw/Desktop/projects/akash/theworldclock/app/src/FetchDataFromBackend/FetchFunctions.js"],"names":["useState","useDispatch","useSelector","FetchFunctions","regionData","setRegionData","utcOffset","state","SendOutputReducer","dispatch","FetchRegions","response","fetch","data","json","prevState","regions","FetchRegion","id","type","payload","calculateDateAndTime","today","Date","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","date","getUTCDate","month","getMonth","year","getFullYear","monthNames","RegionDate","String"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMM,SAAS,GAAGJ,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACC,iBAAN,CAAwBF,SAApC,CAA7B;AACA,QAAMG,QAAQ,GAAGR,WAAW,EAA5B;;AAEA,QAAMS,YAAY,GAAG,YAAY;AAC/B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAT,IAAAA,aAAa,CAAEU,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAe,GAAGF,IAAI,CAACG,OAAvB,CAAhB,CAAb;AACD,GAJD;;AAMA,QAAMC,WAAW,GAAG,MAAOC,EAAP,IAAc;AAChC,UAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,6BAA4BM,EAAG,EAAjC,CAA5B;AACA,UAAML,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAL,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,OAAO,EAAEP;AAFF,KAAD,CAAR;AAID,GAPD;;AASA,QAAMQ,oBAAoB,GAAG,MAAM;AACjC,UAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,UAAMC,KAAK,GAAGF,KAAK,CAACG,WAAN,KAAsB,CAACnB,SAArC;AACA,UAAMoB,OAAO,GAAGJ,KAAK,CAACK,aAAN,EAAhB;AACA,UAAMC,OAAO,GAAGN,KAAK,CAACO,aAAN,EAAhB;AACA,UAAMC,IAAI,GAAGR,KAAK,CAACS,UAAN,EAAb;AACA,UAAMC,KAAK,GAAGV,KAAK,CAACW,QAAN,EAAd;AACA,UAAMC,IAAI,GAAGZ,KAAK,CAACa,WAAN,EAAb;AACA,UAAMC,UAAU,GAAG,CACjB,SADiB,EAEjB,UAFiB,EAGjB,OAHiB,EAIjB,OAJiB,EAKjB,KALiB,EAMjB,MANiB,EAOjB,MAPiB,EAQjB,QARiB,EASjB,WATiB,EAUjB,SAViB,EAWjB,UAXiB,EAYjB,UAZiB,CAAnB;;AAcA,QAAIZ,KAAK,IAAI,EAAb,EAAiB;AACf,YAAMa,UAAU,GACdC,MAAM,CAACR,IAAI,GAAG,CAAR,CAAN,GAAmB,QAAnB,GAA8BM,UAAU,CAACJ,KAAD,CAAxC,GAAkD,IAAlD,GAAyDM,MAAM,CAACJ,IAAD,CADjE;AAED;AACF,GA1BD;;AA4BA,SAAO;AACL9B,IAAAA,UADK;AAELM,IAAAA,YAFK;AAGLO,IAAAA,WAHK;AAILI,IAAAA;AAJK,GAAP;AAMD,CAtDD;;GAAMlB,c;UAEcD,W,EACDD,W;;;KAHbE,c;AAwDN,eAAeA,cAAf","sourcesContent":["import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst FetchFunctions = () => {\r\n  const [regionData, setRegionData] = useState([]);\r\n  const utcOffset = useSelector((state) => state.SendOutputReducer.utcOffset);\r\n  const dispatch = useDispatch();\r\n\r\n  const FetchRegions = async () => {\r\n    const response = await fetch(\"http://localhost:5000/api\");\r\n    const data = await response.json();\r\n    setRegionData((prevState) => [...prevState, ...data.regions]);\r\n  };\r\n\r\n  const FetchRegion = async (id) => {\r\n    const response = await fetch(`http://localhost:5000/api/${id}`);\r\n    const data = await response.json();\r\n    dispatch({\r\n      type: \"LOCATION_DETAILS\",\r\n      payload: data,\r\n    });\r\n  };\r\n\r\n  const calculateDateAndTime = () => {\r\n    const today = new Date();\r\n    const hours = today.getUTCHours() + +utcOffset;\r\n    const minutes = today.getUTCMinutes();\r\n    const seconds = today.getUTCSeconds();\r\n    const date = today.getUTCDate();\r\n    const month = today.getMonth();\r\n    const year = today.getFullYear();\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    if (hours >= 24) {\r\n      const RegionDate =\r\n        String(date + 1) + \"th of \" + monthNames[month] + \", \" + String(year);\r\n    }\r\n  };\r\n\r\n  return {\r\n    regionData,\r\n    FetchRegions,\r\n    FetchRegion,\r\n    calculateDateAndTime,\r\n  };\r\n};\r\n\r\nexport default FetchFunctions;\r\n"]},"metadata":{},"sourceType":"module"}